{"version":3,"sources":["file:///C:/eulerland%20game/EulerLand/assets/scripts/Adaptor/MultiResoultionCompat.ts"],"names":["cc","_decorator","ccclass","property","MultiResolutionCompat","onLoad","view","setDesignResolutionSize","DEFAULT_RESOLUTION_WIDTH","DEFAULT_RESOLUTION_HEIGHT","ResolutionPolicy","SHOW_ALL","getShowAllModeScale","Math","min","getCanvasSize","width","height","getShowAllModeRealHeight","getShowAllModeRealWidth","getShowAllModeVerticalBorderHeight","getShowAllModeHorizontalBorderWidth","getShowAllModeNodePositionCloseToBottom","nodePosInDesign","srcScaleForShowAll","bottomBorderHeightInCanvas","srcNodePosYInCanvas","y","finalNodePosYInCanvas","nodePosYInDesign","v2","x","convertNodePosInDesignToNodePosInCanvas","sub","convertNodePosInCanvasToNodePosInDesign","nodePosInCanvas","div","convertWidthInDesignToWidthInCanvas","widthInDesign","convertWidthInCanvasToWidthInDesign","widthInCanvas","convertHeightInDesignToHeightInCanvas","heightInDesign","convertHeightInCanvasToHeightInDesign","heightIncanvas","Component"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n/**\r\n * 未完成\r\n */\r\n@ccclass\r\nexport default class MultiResolutionCompat extends cc.Component {\r\n    static DEFAULT_RESOLUTION_WIDTH = 720;\r\n    static DEFAULT_RESOLUTION_HEIGHT = 1280;\r\n\r\n    onLoad() {\r\n\r\n        cc.view.setDesignResolutionSize(\r\n            MultiResolutionCompat.DEFAULT_RESOLUTION_WIDTH,\r\n            MultiResolutionCompat.DEFAULT_RESOLUTION_HEIGHT,\r\n            cc.ResolutionPolicy.SHOW_ALL\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率做出的缩放值\r\n     */\r\n    static getShowAllModeScale(): number {\r\n        return Math.min(\r\n            cc.view.getCanvasSize().width / this.DEFAULT_RESOLUTION_WIDTH,\r\n            cc.view.getCanvasSize().height / this.DEFAULT_RESOLUTION_HEIGHT\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率下的界面在实际画布中的实际高度\r\n     */\r\n    static getShowAllModeRealHeight(): number {\r\n        return this.DEFAULT_RESOLUTION_HEIGHT * this.getShowAllModeScale();\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率下的界面在实际画布中的实际宽度\r\n     */\r\n    static getShowAllModeRealWidth(): number {\r\n        return this.DEFAULT_RESOLUTION_WIDTH * this.getShowAllModeScale();\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，上下边界的黑边之和在实际画布中的长度\r\n     */\r\n    static getShowAllModeVerticalBorderHeight(): number {\r\n        return cc.view.getCanvasSize().height - this.getShowAllModeRealHeight();\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，左右边界的黑边之和在实际画布中的长度\r\n     */\r\n    static getShowAllModeHorizontalBorderWidth(): number {\r\n        return cc.view.getCanvasSize().width - this.getShowAllModeRealWidth();\r\n    }\r\n\r\n    /**\r\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，传入来的原始坐标在ShowAll模式下的「贴近屏幕底部」实际坐标值\r\n     */\r\n    static getShowAllModeNodePositionCloseToBottom(nodePosInDesign: cc.Vec2): cc.Vec2 {\r\n        let srcScaleForShowAll = MultiResolutionCompat.getShowAllModeScale();\r\n        let bottomBorderHeightInCanvas = MultiResolutionCompat.getShowAllModeVerticalBorderHeight() / 2;\r\n        let srcNodePosYInCanvas = nodePosInDesign.y * srcScaleForShowAll;\r\n        let finalNodePosYInCanvas = srcNodePosYInCanvas - bottomBorderHeightInCanvas;\r\n        let nodePosYInDesign = finalNodePosYInCanvas / srcScaleForShowAll;\r\n        return cc.v2(nodePosInDesign.x, nodePosYInDesign);\r\n    }\r\n\r\n    /**\r\n     * 将节点在设计分辨率中的坐标转换为节点在实际画布中的坐标\r\n     */\r\n    static convertNodePosInDesignToNodePosInCanvas(nodePosInDesign: cc.Vec2) {\r\n        return nodePosInDesign.sub(cc.v2(this.getShowAllModeScale(), this.getShowAllModeScale()));\r\n    }\r\n\r\n    /**\r\n     * 将节点在实际画布中的坐标转换为节点在设计分辨率中的坐标\r\n     */\r\n    static convertNodePosInCanvasToNodePosInDesign(nodePosInCanvas: cc.Vec2) {\r\n        return nodePosInCanvas.div(cc.v2(this.getShowAllModeScale(), this.getShowAllModeScale()));\r\n    }\r\n\r\n    /**\r\n     * 将设计分辨率下的宽度转换为实际画布中的宽度\r\n     *\r\n     * @param widthInDesign 设计分辨率下的宽度\r\n     */\r\n    static convertWidthInDesignToWidthInCanvas(widthInDesign: number) {\r\n        return widthInDesign * this.getShowAllModeScale();\r\n    }\r\n\r\n    /**\r\n     * 将实际画布中的宽度转换为设计分辨率下的宽度\r\n     *\r\n     * @param widthInCanvas 画布中的宽度\r\n     */\r\n    static convertWidthInCanvasToWidthInDesign(widthInCanvas: number) {\r\n        return widthInCanvas / this.getShowAllModeScale();\r\n    }\r\n\r\n    /**\r\n     * 将设计分辨率下的高度转换为实际画布中的高度\r\n     *\r\n     * @param heightInDesign 设计分辨率下的高度\r\n     */\r\n    static convertHeightInDesignToHeightInCanvas(heightInDesign: number) {\r\n        return heightInDesign * this.getShowAllModeScale();\r\n    }\r\n\r\n    /**\r\n     * 将实际画布中的高度转换为设计分辨率下的宽度\r\n     * @param heightIncanvas 画布中的高度\r\n     */\r\n    static convertHeightInCanvasToHeightInDesign(heightIncanvas: number) {\r\n        return heightIncanvas / this.getShowAllModeScale();\r\n    }\r\n}\r\n"]}