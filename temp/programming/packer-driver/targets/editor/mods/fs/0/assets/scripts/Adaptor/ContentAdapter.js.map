{"version":3,"sources":["file:///C:/Users/86152/Desktop/laowang/EulerLand/assets/scripts/Adaptor/ContentAdapter.ts"],"names":["_decorator","Component","UITransform","view","ccclass","property","ContentAdapter","onLoad","srcScaleForShowAll","Math","min","getCanvasSize","width","node","getComponent","height","realWidth","realHeight","start"],"mappings":";;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAuHC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;;;;;;OAEnJ;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;yBAITM,c,GADpBF,O,UAAD,MACqBE,cADrB,SAC4CL,SAD5C,CACsD;AAClDM,QAAAA,MAAM,GAAG;AAEL,cAAIC,kBAAkB,GAAGC,IAAI,CAACC,GAAL,CAASP,IAAI,CAACQ,aAAL,GAAqBC,KAArB,GAA6B,KAAKC,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAA3E,EAAkFT,IAAI,CAACQ,aAAL,GAAqBI,MAArB,GAA8B,KAAKF,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArJ,CAAzB;AACA,cAAIC,SAAS,GAAG,KAAKH,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,GAA6CJ,kBAA7D;AACA,cAAIS,UAAU,GAAG,KAAKJ,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,GAA8CP,kBAA/D;AAGA,eAAKK,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,GAA6C,KAAKC,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,IAA8CT,IAAI,CAACQ,aAAL,GAAqBC,KAArB,GAA6BI,SAA3E,CAA7C;AACA,eAAKH,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,GAA8C,KAAKF,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,IAA+CZ,IAAI,CAACQ,aAAL,GAAqBI,MAArB,GAA8BE,UAA7E,CAA9C;AAIH;;AACDC,QAAAA,KAAK,GAAG;AACJ,cAAIV,kBAAkB,GAAGC,IAAI,CAACC,GAAL,CAASP,IAAI,CAACQ,aAAL,GAAqBC,KAArB,GAA6B,KAAKC,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAA3E,EAAkFT,IAAI,CAACQ,aAAL,GAAqBI,MAArB,GAA8B,KAAKF,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArJ,CAAzB;AACA,cAAIC,SAAS,GAAG,KAAKH,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,GAA6CJ,kBAA7D;AACA,cAAIS,UAAU,GAAG,KAAKJ,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,GAA8CP,kBAA/D;AAEA,eAAKK,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,GAA6C,KAAKC,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCU,KAArC,IAA8CT,IAAI,CAACQ,aAAL,GAAqBC,KAArB,GAA6BI,SAA3E,CAA7C;AACA,eAAKH,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,GAA8C,KAAKF,IAAL,CAAUC,YAAV,CAAuBZ,WAAvB,EAAqCa,MAArC,IAA+CZ,IAAI,CAACQ,aAAL,GAAqBI,MAArB,GAA8BE,UAA7E,CAA9C;AACH,SArBiD,CAuBlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AArCkD,O","sourcesContent":["\r\nimport { _decorator, Component, Node, NodePool, Prefab, instantiate, CCInteger, math, randomRangeInt, RichText, director, Camera, Vec3, UI, UITransform, view } from 'cc';\r\nimport { DEBUG } from 'cc/env';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass\r\nexport default class ContentAdapter extends Component {\r\n    onLoad() {\r\n\r\n        let srcScaleForShowAll = Math.min(view.getCanvasSize().width / this.node.getComponent(UITransform)!.width, view.getCanvasSize().height / this.node.getComponent(UITransform)!.height);\r\n        let realWidth = this.node.getComponent(UITransform)!.width * srcScaleForShowAll;\r\n        let realHeight = this.node.getComponent(UITransform)!.height * srcScaleForShowAll;\r\n\r\n\r\n        this.node.getComponent(UITransform)!.width = this.node.getComponent(UITransform)!.width * (view.getCanvasSize().width / realWidth);\r\n        this.node.getComponent(UITransform)!.height = this.node.getComponent(UITransform)!.height * (view.getCanvasSize().height / realHeight);\r\n\r\n\r\n\r\n    }\r\n    start() {\r\n        let srcScaleForShowAll = Math.min(view.getCanvasSize().width / this.node.getComponent(UITransform)!.width, view.getCanvasSize().height / this.node.getComponent(UITransform)!.height);\r\n        let realWidth = this.node.getComponent(UITransform)!.width * srcScaleForShowAll;\r\n        let realHeight = this.node.getComponent(UITransform)!.height * srcScaleForShowAll;\r\n\r\n        this.node.getComponent(UITransform)!.width = this.node.getComponent(UITransform)!.width * (view.getCanvasSize().width / realWidth);\r\n        this.node.getComponent(UITransform)!.height = this.node.getComponent(UITransform)!.height * (view.getCanvasSize().height / realHeight);\r\n    }\r\n\r\n    // private _updateAllChildNodeWidget(parentNode: cc.Node) {\r\n    //     if (parentNode == null) {\r\n    //         return;\r\n    //     }\r\n    //     let widget = parentNode.getComponent(cc.Widget);\r\n    //     if (widget != null) {\r\n    //         widget.updateAlignment();\r\n    //     }\r\n    //     if (parentNode.childrenCount == 0) {\r\n    //         return;\r\n    //     }\r\n    //     parentNode.children.forEach((childNode: cc.Node) => {\r\n    //         this._updateAllChildNodeWidget(childNode);\r\n    //     });\r\n    // }\r\n}\r\n"]}