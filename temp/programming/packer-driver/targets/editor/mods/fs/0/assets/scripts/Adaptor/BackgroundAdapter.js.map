{"version":3,"sources":["file:///C:/Users/86152/Desktop/laowang/EulerLand/assets/scripts/Adaptor/BackgroundAdapter.ts"],"names":["ccclass","property","cc","_decorator","BackgroundAdapter","Component","onLoad","srcScaleForShowAll","Math","min","view","getCanvasSize","width","node","height","realWidth","realHeight","scale","max"],"mappings":";;;;;;;;;;;;;;OACM;AAAEA,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBC,EAAE,CAACC,U;;yBAGZC,iB,GADpBJ,O,UAAD,MACqBI,iBADrB,SAC+CF,EAAE,CAACG,SADlD,CAC4D;AACxDC,QAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,cAAIC,kBAAkB,GAAGC,IAAI,CAACC,GAAL,CAASP,EAAE,CAACQ,IAAH,CAAQC,aAAR,GAAwBC,KAAxB,GAAgC,KAAKC,IAAL,CAAUD,KAAnD,EAA0DV,EAAE,CAACQ,IAAH,CAAQC,aAAR,GAAwBG,MAAxB,GAAiC,KAAKD,IAAL,CAAUC,MAArG,CAAzB;AACA,cAAIC,SAAS,GAAG,KAAKF,IAAL,CAAUD,KAAV,GAAkBL,kBAAlC;AACA,cAAIS,UAAU,GAAG,KAAKH,IAAL,CAAUC,MAAV,GAAmBP,kBAApC,CAhBK,CAkBL;;AACA,eAAKM,IAAL,CAAUI,KAAV,GAAkBT,IAAI,CAACU,GAAL,CAAShB,EAAE,CAACQ,IAAH,CAAQC,aAAR,GAAwBC,KAAxB,GAAgCG,SAAzC,EAAoDb,EAAE,CAACQ,IAAH,CAAQC,aAAR,GAAwBG,MAAxB,GAAiCE,UAArF,CAAlB,CAnBK,CAqBL;AACA;AACA;AACA;AACA;AACH;;AA3BuD,O","sourcesContent":["\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BackgroundAdapter extends cc.Component {\r\n    onLoad() {\r\n        // if (CC_DEBUG) {\r\n        //     cc.log(\"调整前\");\r\n        //     cc.log(`屏幕分辨率: ${cc.view.getCanvasSize().width} x ${cc.view.getCanvasSize().height}`);\r\n        //     cc.log(`视图窗口可见区域分辨率: ${cc.view.getVisibleSize().width} x ${cc.view.getVisibleSize().height}`);\r\n        //     cc.log(`视图中边框尺寸: ${cc.view.getFrameSize().width} x ${cc.view.getFrameSize().height}`);\r\n        //     cc.log(`设备或浏览器像素比例: ${cc.view.getDevicePixelRatio()}`);\r\n        //     cc.log(`画布X:设计X=${cc.view.getScaleX()} ，画布Y:设计Y=${cc.view.getScaleY()}`);\r\n        //     cc.log(`节点宽高: ${this.node.width} x ${this.node.height}`);\r\n        //     cc.log(`节点缩放: ${this.node.scaleX} x ${this.node.scaleY}`);\r\n        // }\r\n\r\n        // this.node.scale = Math.max(cc.view.getCanvasSize().width / this.node.width, cc.view.getCanvasSize().height / this.node.height);\r\n        // 1. 先找到 SHOW_ALL 模式适配之后，本节点的实际宽高以及初始缩放值\r\n        let srcScaleForShowAll = Math.min(cc.view.getCanvasSize().width / this.node.width, cc.view.getCanvasSize().height / this.node.height);\r\n        let realWidth = this.node.width * srcScaleForShowAll;\r\n        let realHeight = this.node.height * srcScaleForShowAll;\r\n\r\n        // 2. 基于第一步的数据，再做缩放适配\r\n        this.node.scale = Math.max(cc.view.getCanvasSize().width / realWidth, cc.view.getCanvasSize().height / realHeight);\r\n\r\n        // if (CC_DEBUG) {\r\n        //     cc.log(`节点在SHOW_ALL模式下展示的宽高: ${realWidth} x ${realHeight}`);\r\n        //     cc.log(`节点在SHOW_ALL模式下展示的缩放: ${srcScaleForShowAll}`);\r\n        //     cc.log(`节点在SHOW_ALL模式下还需要进行的缩放: ${this.node.scale} 才能达到全屏`);\r\n        // }\r\n    }\r\n}\r\n"]}